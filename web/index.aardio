<!DOCTYPE html>
<html lang="zh">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
        <link rel="stylesheet" href="./css/index.css">
    </head>
    <style>
        @font-face {
            font-family: 'MONACO';
            src: url("./font/MONACO.TTF") format('truetype');
            font-weight:  bold;
            opacity: 1;
        }
        
        textarea {
            color: #2016131 !important;
            font-family: MONACO !important;
        }
      
        html, body {
            width: 100%;
            height:100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        
        body {
            border-top: 1px solid #FFF2F2F2;
        }
        
        /*---滚动条默认显示样式--*/
        .custom-scroll-bar::-webkit-scrollbar-thumb {
            background-color: #018EE8;
            height: 50px;
            outline-offset: -2px;
            outline: 2px solid #fff;
            -webkit-border-radius: 4px;
            border: 2px solid #fff;
        }

        /*---鼠标点击滚动条显示样式--*/
        .custom-scroll-bar::-webkit-scrollbar-thumb:hover {
            background-color: #FB4446;
            height: 50px;
            -webkit-border-radius: 4px;
        }

        /*---滚动条大小--*/
        .custom-scroll-bar::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        /*---滚动框背景样式--*/
        .custom-scroll-bar::-webkit-scrollbar-track-piece {
            background-color: #fff;
            -webkit-border-radius: 0;
        }

        .custom-scroll-bar::-webkit-scrollbar-thumb:active {
            height: 50px;
            background-color: #000;
            -webkit-border-radius: 4px;
        }

        .wrap {
            /* border: 1px solid #006DB7; */
            overflow: hidden;
        }
        
        .wrap:hover {
            overflow-y: auto;
        }
        
        .yu-alert {
            margin: 0;
            width:auto;
        }
        
        .yu-header {
            background-color: antiquewhite;
        }
        
        .yu-sidebar {
            background-color: #FFFFFFFF;
        }
        
        .yu-content {
            background-color: #FFFFFFFF;
            border-left: 1px solid #FFF2F2F2;
        }
        
        .web-container {
            
        }
        
        .textarea {
            height:100% !important;
        }
        .textarea>textarea{
            width:100%;
            height:100%;
        }
    </style>
<?
    import fsys;
    import fsys.ini
    import console;
    配置文件 = "\Afile_fast_build_GUI.ini"

    if not io.exist(配置文件){
        ini = fsys.ini(配置文件);

        ini_app = ini.getSection("软件配置");
        ini_app.路径 = "./res/makefile";
        ini_app.文件名 = "project_*.mk";
        ini_app.save();

        ini_market = ini.getSection("市场");
        ini_market.save();

        ini_build_module = ini.getSection("编译模块配置");
        ini_build_module.new = "new";
        ini_build_module.app = "m=app";
        ini_build_module.simulator = "m=simulator";
        ini_build_module.save();

        ini_build = ini.getSection("编译配置");
        ini_build.job = "job=8";
        ini_build.j = "-j 4";
        ini_build.save();
    }else {
        ini = fsys.ini(配置文件)
        ini_app = ini.getSection("软件配置");
        ini_market = ini.getSection("市场");
        ini_build_module = ini.getSection("编译模块配置");
        ini_build = ini.getSection("编译配置");
    }

    //********* 移植

    var getAllProjectFiles = function(project_file_dir, match_file_name){
        var all_project_files_list = {};
        fsys.enum( project_file_dir, match_file_name,
            function(dirname,filename,fullpath,findData){ 
                if(filename){ 
                    table.insert(all_project_files_list, filename);
                }
            } 
            ,false/*如果此参数为false则忽略子目录*/
        );
        return all_project_files_list;
    }

    var listToDict = function(p_list){
        class DictStruct { //这里定义
            str project_name;
            str project_file_name;
        }

        var all_project_files_list_dict = {};
        for(i=1;#p_list;1){
            var temp = DictStruct();
            temp.project_name = string.split(p_list[i],"_")[3];
            temp.project_file_name = p_list[i];
            table.push(all_project_files_list_dict,temp)//把a值逐个写到Allinfo中
        }
        return all_project_files_list_dict;
    }

    var tableUnique = function(arr,key){
        var rAr = {};
        var temp = {};
        for(k,v in arr){
            var a = v[key];
            if(!rAr[a]){
                rAr[a]= v;
                table.insert(temp, a);
            }
        }
        return temp;
    }
    //获取所有文件名
    var allPrjFileName = getAllProjectFiles(ini_app.路径, ini_app.文件名);

    //设置文件名、项目名的键值对
    var allPrjFileDict = listToDict(allPrjFileName);

    //提取唯一项目名
    var allPrjName = tableUnique(allPrjFileDict,"project_name")
    table.sort(allPrjName);
    //********* 移植end
?>
    <body>
        <div class="yu-layout">
            <div class="yu-layout-inline">
                <div class="yu-sidebar custom-scroll-bar wrap" οnmοuseοver="console.log('Hello')">
                    <div class="yu-alert info" style="width:200px"><i class="iconfont icon-tag"></i>项目名</div>
                    <div class="web-container">
                        <div class="yu-menu light vertical">
                            <div class="sub-menu">
                                <?
                                    for(sub, prjName in allPrjName){
                                ?>
                                <div class="menu-title">
                                    <i class="iconfont icon-f-text"></i><?=prjName?>
                                    <i class="iconfont icon-angle-down"></i>
                                </div>
                                <div class="sub-menu" style="height: 0;overflow: hidden;">
                                <?
                                        for(k,prjFile in allPrjFileDict){
                                            if(prjFile.project_name == prjName){
                                                var marketTemp = string.split(prjFile.project_file_name,"_");
                                                marketTemp = string.split(marketTemp[#marketTemp],".")[1];
                                                prjMaket = ini_market[marketTemp] ? ini_market[marketTemp] : string.find(marketTemp,"^En") ? "OP" : marketTemp;
                                ?>
                                    <div id="<?= io._exedir ++ prjFile.project_file_name?>" class="menu-item" style="padding-left: 30px">
                                        <?=prjName ++ "-" ++ prjMaket?>
                                    </div>
                                <?
                                            }
                                        }
                                ?>
                                </div>
                                <?         
                                    }                     
                                ?>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="yu-layout-block">
                    <div id="title-tip" class="yu-alert primary">makefile 完整路径</div>
                    
                    <div class="yu-radio-group" id="build-type">
                        <?
                            for(k,module in ini_build_module){
                        ?>
    						<label class="yu-radio" onclick="buildTypeClick(this)" :option='{"label":"<?=module?>","value":"<?=k?>"}'></label>
                        <?
                            }
                        ?>
                    </div>
                    
                    <div class="yu-input">
                          <input id="build-input" type="text" class="append" style="width:-webkit-calc(100% - 90px);" placeholder="编译命令">
                          <button class="yu-button append primary" style="width:90px" onclick="goBuild(document.getElementById('build-input').value)">Build</button>
                    </div>

                    <div class="yu-input textarea">
                          <textarea id="build-log"></textarea>
                    </div>
                    
                    <div class="yu-alert primary"><i class="iconfont icon-check-circle"></i>
                    hello<p style="float:right; margin:0;">hello</p>
                    </div>
                </div>
            </div>
        </div>
    </body>
    <script src="./js/index.js"></script>
    <script type="text/javascript">
		// 避免重复渲染Radio组件
		Array.from(document.getElementById("build-type").children).forEach(function (item) {
    		new yu.Radio(item)
		})
		var the = new yu.init("RadioGroup")
		function buildTypeClick(_this) {
    		console.log(_this.innerText)
		}

		var aardio = window.chrome.webview.hostObjects.aardio;
		var aardios = window.chrome.webview.hostObjects.sync.aardio;
		window.invoke = (id,...data)=>{aardios.varpool[id - 1](...data)}
		
		function goBuild(value) {
			var p = aardios.process_.popen(value)
			p.each2(aardios.mainForm,(all,out,err)=>{
				document.getElementById('build-log').value += out;
			})
		}
		
    
        let menuActivedSub = -1;
        let menuItemActivedSub = -1;
        let menus = document.querySelectorAll('.vertical .menu-title');
        let menuItems = document.querySelectorAll('.sub-menu .menu-item');

        function menuShow(e) {
            let menuHeight = e.currentTarget.nextElementSibling.getElementsByClassName("menu-item").length * 40;
            e.currentTarget.classList.toggle('active', true);
            e.currentTarget.nextElementSibling.style.height = menuHeight + 'px';
            e.currentTarget.getElementsByClassName("iconfont")[0].classList.toggle('icon-f-text', false);
            e.currentTarget.getElementsByClassName("iconfont")[0].classList.toggle('icon-eye', true);
        }

        function menuHide() {
            menus[menuActivedSub].classList.toggle('active', false);
            menus[menuActivedSub].nextElementSibling.style.height = '0';
            menus[menuActivedSub].getElementsByClassName("iconfont")[0].classList.toggle('icon-f-text', true);
            menus[menuActivedSub].getElementsByClassName("iconfont")[0].classList.toggle('icon-eye', false);
        }

        Array.from(menus).forEach((item) => {
            item.addEventListener('click', function(e) {
                if (-1 == menuActivedSub) {
                    //显示当前点击的菜单
                    menuShow(e);
                } else if (-1 != menuActivedSub && e.currentTarget.classList.contains("active")) {
                    //隐藏之前显示的菜单
                    menuHide();
                } else if (-1 != menuActivedSub) {
                    //隐藏之前显示的菜单
                    menuHide();
                    //显示当前点击的菜单
                    menuShow(e);
                } else {
                    alert("菜单显示/隐藏逻辑错误！");
                }
                //记录当前为显示状态的菜单下标
                for (let i = 0; i < menus.length; i++) {
                    if (item == menus[i]) {
                        menuActivedSub = i;
                    }
                }
            })
        })

        Array.from(menuItems).forEach((item) => {
            item.addEventListener('click', function(e) {
                //选中当前点击的菜单子项
                e.currentTarget.classList.add('active');

                //隐藏非当前点击的、上一次选中的菜单子项
                if (-1 != menuItemActivedSub && e.currentTarget != menuItems[menuItemActivedSub]) {
                    menuItems[menuItemActivedSub].classList.remove("active")
                }
                document.getElementById("title-tip").innerText = e.currentTarget.id;
                //记录当前为选中状态的菜单子项下标
                for (let i = 0; i < menuItems.length; i++) {
                    if (item == menuItems[i]) {
                        menuItemActivedSub = i;
                        return;
                    }
                }
            })
        })
    </script>
</html>
